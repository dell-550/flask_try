[uwsgi]
# HTTP mode (not typically used in production when working with Nginx)
# http = 127.0.0.1:5000  # Uncomment this if you want uWSGI to directly serve HTTP requests (not commonly used with Nginx)

# Set the application directory (uncomment if you want to set this explicitly)
# chdir = /home/power/flask_try

# Specify the WSGI entry point file for your project (the file that contains the Flask app object)
wsgi-file = manage.py

# This points to the Flask application callable inside manage.py (usually 'app' in a Flask app)
callable = app

# Enable master process, useful for scaling and process management
log-master = true

# Set up a virtual environment to use with uWSGI
#virtualenv = /root/.local/share/virtualenvs/flask_try-1EnXE9dr

# Log file path for uWSGI logs
#logto = /home/power/flask_try/logs/uwsgi.log

# Specify the socket for Nginx to connect to uWSGI (Unix socket or TCP socket)
# If you want to use a Unix socket, use something like:
# socket = /path/to/your/socket.sock
# Here, using a TCP socket on localhost for testing
socket = 0.0.0.0:8000

# Set appropriate permissions for the socket (make it accessible to Nginx)
chmod-socket = 660

# Define the number of worker processes (adjust based on your server's CPU cores)
processes = 2

# Number of threads per process
threads = 10

# Optional: Increase buffer size if large request data is handled (not strictly necessary)
# buffer-size = 32768

# Enable master process management (recommended for better performance)
master = true

# Optional: Log to a specific file for daemonized processes (uncomment to use)
# daemonize = /home/power/flask_try/flaskweb.log

# Optional: PID file (useful for process management)
# pidfile = /home/power/flask_try/uwsgi.pid
